{"version":3,"sources":["src_babel/class.js"],"names":[],"mappings":";;;AACA,CAAC,UAAS,OAAO,EAAE;AACf,QAAI,YAAY,GAAG,KAAK,CAAC;;;AAGzB,QAAI,KAAK,GAAG,SAAR,KAAK,GAAa,EAAE,CAAC;;;AAGzB,SAAK,CAAC,MAAM,GAAG,UAAS,IAAI,EAAE;AAC1B,YAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;;;;AAI5B,oBAAY,GAAG,IAAI,CAAC;AACpB,YAAI,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;AAC3B,oBAAY,GAAG,KAAK,CAAC;;;AAGrB,aAAK,IAAI,IAAI,IAAI,IAAI,EAAE;AACnB,qBAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;SAChC;;;AAGD,iBAAS,QAAQ,GAAG;;AAEhB,gBAAK,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,EACjC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SAC9C;;AAED,gBAAQ,CAAC,UAAU,GAAG,MAAM,CAAC;;;AAG7B,gBAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;;;AAG/B,gBAAQ,CAAC,SAAS,CAAC,WAAW,GAAG,QAAQ,CAAC;;;;AAI1C,gBAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;;AAE/B,eAAO,QAAQ,CAAC;KACnB,CAAC;;AAEF,WAAO,CAAC,KAAK,GAAG,KAAK,CAAC;CAEzB,CAAA,CAAE,IAAI,CAAC,CAAC","file":"src_babel/class.js","sourcesContent":["// Inspired by base2 and Prototype\n(function(context) {\n    var initializing = false;\n\n    // The base Class implementation (does nothing)\n    var Class = function(){};\n\n    // Create a new Class that inherits from this class\n    Class.extend = function(prop) {\n        var _super = this.prototype;\n\n        // Instantiate a base class (but only create the instance,\n        // don't run the init constructor)\n        initializing = true;\n        var prototype = new this();\n        initializing = false;\n\n        // Copy the properties over onto the new prototype\n        for (var name in prop) {\n            prototype[name] = prop[name];\n        }\n\n        // The dummy class constructor\n        function SubClass() {\n            // All construction is actually done in the initialize method\n            if ( !initializing && this.initialize )\n                this.initialize.apply(this, arguments);\n        }\n\n        SubClass.superclass = _super;\n\n        // Populate our constructed prototype object\n        SubClass.prototype = prototype;\n\n        // Enforce the constructor to be what we expect\n        SubClass.prototype.constructor = SubClass;\n\n        // And make this class extendable\n        //SubClass.extend = arguments.callee;\n        SubClass.extend = Class.extend;\n\n        return SubClass;\n    };\n\n    context.Class = Class;\n\n})(Nova);\n\n"]}